plugins {
    id 'scala'
    id 'idea'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.9.9'
    id 'com.github.maiflai.scalatest' version '0.19'
    id "com.jfrog.bintray" version "1.7.3"
    id 'maven-publish'
}

// mostly copied from com.charlesahunt.scalapb-plugin + some additions
group 'com.nianticproject.gradle'
version = '1.1.6-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.4.1"
}

dependencies {
  compile gradleApi()
  compile 'org.scala-lang:scala-library:2.12.4'
  compile 'org.scala-sbt:io_2.12:1.1.0'
  compile 'com.github.os72:protoc-jar:3.5.1'
  compile 'com.typesafe.scala-logging:scala-logging_2.12:3.7.2'
  testCompile group: 'org.scalatest', name: 'scalatest_2.12', version: "3.0.1"
  testRuntime 'org.pegdown:pegdown:1.4.2'
  compile 'com.google.protobuf:protobuf-java:3.5.1'
  compile 'com.trueaccord.scalapb:compilerplugin_2.12:0.6.7'
  compile 'com.trueaccord.scalapb:scalapb-runtime-grpc_2.12:0.6.7'
  compile 'com.trueaccord.scalapb:scalapb-runtime_2.12:0.6.7'

  testCompile gradleTestKit()
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

gradlePlugin {
    plugins {
        scalapbPlugin {
            id = 'com.nianticproject.gradle.scalapb-plugin'
            implementationClass = 'com.nianticproject.gradle.scalapb.ScalaPBPlugin'
        }
    }
}

pluginBundle {
    website = 'https://gitlab.nianticlabs.com/cchow/scalapb-gradle-plugin'
    vcsUrl = 'git@gitlab.nianticlabs.com:cchow/scalapb-gradle-plugin.git'
    tags = ['scala', 'scalapb', 'proto', 'protobuf']
    
    plugins {
        scalapbPlugin {
            id = 'com.nianticproject.gradle.scalapb-plugin'
            displayName = 'Gradle ScalaPB Plugin'
            description = 'This plugin uses the [ScalaPB](http://scalapb.github.io) compiler to generate Scala case' +
                    ' classes from protocol buffers and put them under the managed sources directory in your project.'
        }
    }
}

// Plugin publication
publishing {
  publications {
      pluginPublication (MavenPublication) {
          from        components.java
          groupId     project.group
          artifactId  project.name
          version     project.version
      }
    }

  repositories {
    maven {
      // By default we publish to the shared snapshot repository, but
      // you can publish to your own private repo instead, like so:
      // ./gradlew platform:publish -PmavenPublishPath=/nexus/content/repositories/mysnapshots
      url "https://${mavenRepoHost}${mavenPublishPath}"
      credentials {
        username deployMavenUser
        password deployMavenPassword
      }
    }
  }
}